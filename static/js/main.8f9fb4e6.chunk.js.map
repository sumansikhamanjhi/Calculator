{"version":3,"sources":["App.js","calculator/keyPad.js","calculator/output.js","serviceWorker.js","index.js"],"names":["App","state","result","buttonPressed","buttonName","calculate","reset","backspace","setState","slice","eval","e","className","this","React","Component","KeyPad","props","target","name","onClick","Output","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0gDAMMA,I,8uBAEJC,MAAM,CACJC,OAAO,I,MAETC,cAAc,SAACC,GACK,MAAfA,EACD,MAAKC,YACgB,MAAfD,EACN,MAAKE,QACgB,OAAfF,EACN,MAAKG,YAEP,MAAKC,SAAS,CACZN,OAAS,MAAKD,MAAMC,OAASE,K,MAIjCE,MAAQ,WACN,MAAKE,SAAS,CACZN,OAAO,M,MAIXK,UAAY,WACV,MAAKC,SAAS,CACZN,OAAS,MAAKD,MAAMC,OAAOO,MAAM,GAAG,M,MAIxCJ,UAAY,WACV,IACA,MAAKG,SAAS,CACZN,QAAUQ,KAAK,MAAKT,MAAMC,SAAW,IAAO,KAC1C,MAAMS,GACR,MAAKH,SAAS,CACZN,OAAO,Y,kNAMX,OACE,kEAAKU,UAAU,OACb,iEAAIA,UAAU,QAAd,qBACA,kEAAKA,UAAU,aACf,2DAAC,kDAAD,CAAQV,OAAQW,KAAKZ,MAAMC,SAC3B,2DAAC,kDAAD,CAAQC,cAAeU,KAAKV,sB,KA/ClBW,6CAAMC,WAsDTf,2B,6EC1DTgB,E,4MAEFb,cAAc,SAACQ,GACX,EAAKM,MAAMd,cAAcQ,EAAEO,OAAOC,O,uDAGlC,OACI,yBAAKP,UAAU,WACX,4BAAQO,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,KAAKC,QAASP,KAAKV,eAAhC,MACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,KACA,4BAAQgB,KAAK,IAAIC,QAASP,KAAKV,eAA/B,U,GA3BKW,IAAMC,WAiCZC,O,6EC/BTK,G,4KAEE,OACI,yBAAKT,UAAU,UACZ,2BAAIC,KAAKI,MAAMf,a,GAJTY,IAAMC,YAUZM,O,sICFKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC7B,EAAA,EAAD,OAEF8B,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f9fb4e6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './calculator/style.css';\nimport Keypad from './calculator/keyPad'\nimport Output from './calculator/output'\n\nclass App extends React.Component {\n\n  state={\n    result:\"\",\n  }\n  buttonPressed=(buttonName)=>{\n    if(buttonName === \"=\")\n      this.calculate();\n    else if(buttonName === \"C\")\n      this.reset();\n    else if(buttonName === \"CE\")\n      this.backspace();\n    else\n    this.setState({\n      result : this.state.result + buttonName,\n    })\n  }\n\n  reset = () =>{\n    this.setState({\n      result:\"\",\n    })\n  }\n\n  backspace = () => {\n    this.setState({\n      result : this.state.result.slice(0,-1)\n    })\n  }\n\n  calculate = () => {\n    try{\n    this.setState({\n      result : (eval(this.state.result) || \"\" ) + \"\"\n    });}catch(e){\n      this.setState({\n        result:\"Error\"\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"head\">Simple Calculator</h1>\n        <div className=\"calc-body\">\n        <Output result={this.state.result} />\n        <Keypad buttonPressed={this.buttonPressed} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\n\nclass KeyPad extends React.Component{\n\n    buttonPressed=(e)=>{\n        this.props.buttonPressed(e.target.name)\n    }\n    render(){\n        return (\n            <div className=\"buttons\">\n                <button name=\"(\" onClick={this.buttonPressed}>(</button>\n                <button name=\"C\" onClick={this.buttonPressed}>C</button>\n                <button name=\"CE\" onClick={this.buttonPressed}>CE</button>\n                <button name=\")\" onClick={this.buttonPressed}>)</button>\n                <button name=\"1\" onClick={this.buttonPressed}>1</button>\n                <button name=\"2\" onClick={this.buttonPressed}>2</button>\n                <button name=\"3\" onClick={this.buttonPressed}>3</button>\n                <button name=\"+\" onClick={this.buttonPressed}>+</button>\n                <button name=\"4\" onClick={this.buttonPressed}>4</button>\n                <button name=\"5\" onClick={this.buttonPressed}>5</button>\n                <button name=\"6\" onClick={this.buttonPressed}>6</button>\n                <button name=\"-\" onClick={this.buttonPressed}>-</button>\n                <button name=\"7\" onClick={this.buttonPressed}>7</button>\n                <button name=\"8\" onClick={this.buttonPressed}>8</button>\n                <button name=\"9\" onClick={this.buttonPressed}>9</button>\n                <button name=\"*\" onClick={this.buttonPressed}>x</button>\n                <button name=\".\" onClick={this.buttonPressed}>.</button>\n                <button name=\"0\" onClick={this.buttonPressed}>0</button>\n                <button name=\"=\" onClick={this.buttonPressed}>=</button>\n                <button name=\"/\" onClick={this.buttonPressed}>/</button>\n            </div>\n        )\n    }\n\n}\nexport default KeyPad;\n","import React from 'react'\nimport './style.css';\n\n\nclass Output extends React.Component{\n    render(){\n        return (\n            <div className=\"result\">\n               <p>{this.props.result}</p>\n            </div>\n        )\n    }\n\n}\nexport default Output;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}